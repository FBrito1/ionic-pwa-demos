System.registerDynamic("src/scroll-listener", ["rxjs/add/observable/fromEvent", "rxjs/add/operator/startWith", "rxjs/add/operator/sampleTime", "rxjs/add/operator/share", "rxjs/Observable"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  $__require('rxjs/add/observable/fromEvent');
  $__require('rxjs/add/operator/startWith');
  $__require('rxjs/add/operator/sampleTime');
  $__require('rxjs/add/operator/share');
  var Observable_1 = $__require('rxjs/Observable');
  var scrollListeners = {};
  exports.getScrollListener = function(scrollTarget) {
    if (scrollTarget in scrollListeners) {
      return scrollListeners[scrollTarget];
    }
    scrollListeners[scrollTarget] = Observable_1.Observable.fromEvent(scrollTarget, 'scroll').sampleTime(100).share().startWith('');
    return scrollListeners[scrollTarget];
  };
  return module.exports;
});

System.registerDynamic("src/lazyload-image.directive", ["rxjs/add/operator/filter", "rxjs/add/operator/finally", "rxjs/add/operator/do", "rxjs/add/operator/switchMap", "rxjs/add/operator/take", "@angular/core", "rxjs/Observable", "./scroll-listener"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  $__require('rxjs/add/operator/filter');
  $__require('rxjs/add/operator/finally');
  $__require('rxjs/add/operator/do');
  $__require('rxjs/add/operator/switchMap');
  $__require('rxjs/add/operator/take');
  var core_1 = $__require('@angular/core');
  var Observable_1 = $__require('rxjs/Observable');
  var scroll_listener_1 = $__require('./scroll-listener');
  var LazyLoadImageDirective = (function() {
    function LazyLoadImageDirective(el) {
      this._scrollTarget = window;
      this.elementRef = el;
    }
    Object.defineProperty(LazyLoadImageDirective.prototype, "scrollTarget", {
      set: function(target) {
        this._scrollTarget = target || this._scrollTarget;
      },
      enumerable: true,
      configurable: true
    });
    ;
    LazyLoadImageDirective.prototype.ngAfterContentInit = function() {
      var _this = this;
      this.scrollSubscription = scroll_listener_1.getScrollListener(this._scrollTarget).filter(function() {
        return _this.isVisible();
      }).take(1).switchMap(function() {
        return _this.loadImage(_this.lazyImage);
      }).do(function() {
        return _this.setImage(_this.lazyImage);
      }).finally(function() {
        return _this.setLoadedStyle();
      }).subscribe(function() {
        return _this.ngOnDestroy();
      }, function(error) {
        _this.setImage(_this.defaultImg);
        _this.ngOnDestroy();
      });
    };
    LazyLoadImageDirective.prototype.loadImage = function(image) {
      return Observable_1.Observable.create(function(observer) {
        var img = new Image();
        img.src = image;
        img.onload = function() {
          observer.next(img);
          observer.complete();
        };
        img.onerror = function(err) {
          observer.error(err);
          observer.complete();
        };
      });
    };
    LazyLoadImageDirective.prototype.setImage = function(image) {
      var element = this.elementRef.nativeElement;
      var isImgNode = this.elementRef.nativeElement.nodeName.toLowerCase() === 'img';
      if (isImgNode) {
        element.src = image;
      } else {
        element.style.backgroundImage = "url('" + image + "')";
      }
    };
    LazyLoadImageDirective.prototype.setLoadedStyle = function() {
      var styles = this.elementRef.nativeElement.className.split(' ').filter(function(s) {
        return !!s;
      }).filter(function(s) {
        return s !== 'ng2-lazyloading';
      });
      styles.push('ng2-lazyloaded');
      this.elementRef.nativeElement.className = styles.join(' ');
    };
    LazyLoadImageDirective.prototype.isVisible = function() {
      var rect = this.elementRef.nativeElement.getBoundingClientRect();
      var threshold = (this.offset | 0);
      var elementLargerThenViewport = rect.top <= threshold && rect.bottom >= -threshold;
      var topInsideViewport = rect.top >= 0 && rect.top <= window.innerHeight;
      var belowInsideViewport = rect.bottom >= 0 && rect.bottom <= window.innerHeight;
      var rightsideInViewport = rect.right >= -threshold && (rect.right - threshold) <= window.innerWidth;
      var leftsideInViewport = rect.left >= -threshold && (rect.left - threshold) <= window.innerWidth;
      return (elementLargerThenViewport || ((topInsideViewport || belowInsideViewport) && (rightsideInViewport || leftsideInViewport)));
    };
    LazyLoadImageDirective.prototype.ngOnDestroy = function() {
      [this.scrollSubscription].filter(function(subscription) {
        return subscription && !subscription.isUnsubscribed;
      }).forEach(function(subscription) {
        return subscription.unsubscribe();
      });
    };
    __decorate([core_1.Input('lazyLoad'), __metadata('design:type', Object)], LazyLoadImageDirective.prototype, "lazyImage", void 0);
    __decorate([core_1.Input('src'), __metadata('design:type', Object)], LazyLoadImageDirective.prototype, "defaultImg", void 0);
    __decorate([core_1.Input(), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], LazyLoadImageDirective.prototype, "scrollTarget", null);
    __decorate([core_1.Input(), __metadata('design:type', Number)], LazyLoadImageDirective.prototype, "offset", void 0);
    LazyLoadImageDirective = __decorate([core_1.Directive({selector: '[lazyLoad]'}), __metadata('design:paramtypes', [core_1.ElementRef])], LazyLoadImageDirective);
    return LazyLoadImageDirective;
  }());
  exports.LazyLoadImageDirective = LazyLoadImageDirective;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.default = LazyLoadImageDirective;
  return module.exports;
});

System.registerDynamic("index", ["./src/lazyload-image.directive"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var lazyload_image_directive_1 = $__require('./src/lazyload-image.directive');
  exports.LazyLoadImageDirective = lazyload_image_directive_1.LazyLoadImageDirective;
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.default = {directives: [lazyload_image_directive_1.LazyLoadImageDirective]};
  return module.exports;
});
