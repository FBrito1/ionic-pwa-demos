"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require('@angular/core');
var Observable_1 = require('rxjs/Observable');
require('rxjs/add/observable/fromEvent');
require('rxjs/add/operator/debounceTime');
var image_lazy_load_provider_1 = require('../providers/image-lazy-load.provider');
var ImageLazyLoadAreaDirective = (function () {
    function ImageLazyLoadAreaDirective(items) {
        this.items = items;
    }
    ImageLazyLoadAreaDirective.prototype.loadInView = function (list) {
        this.itemsToLoad = (list || this.itemsToLoad).filter(function (item) { return !item.loaded && !item.loading; });
        for (var _i = 0, _a = this.itemsToLoad; _i < _a.length; _i++) {
            var item = _a[_i];
            var ePos = item.getPosition();
            if (ePos.bottom > 0 && (ePos.bottom >= (window.pageYOffset - this.threshold)) && (ePos.top <= ((window.pageYOffset + window.innerHeight) + this.threshold))) {
                item.loadImage();
            }
        }
        if (this.itemsToLoad.length === 0) {
            // subscription is no longer needed
            this.scrollSubscription.unsubscribe();
            this.scrollSubscription = undefined;
        }
    };
    ImageLazyLoadAreaDirective.prototype.scrollSubscribe = function () {
        var _this = this;
        var scrollStream = Observable_1.Observable.fromEvent(window, 'scroll').debounceTime(250);
        this.scrollSubscription = scrollStream.subscribe(function () {
            _this.loadInView();
        });
    };
    ImageLazyLoadAreaDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.threshold = +this.threshold || 100;
        this.items.changes.subscribe(function (list) {
            _this.loadInView(list.toArray());
            if (!_this.scrollSubscription) {
                _this.scrollSubscribe();
            }
        });
    };
    __decorate([
        core_1.Input('imageLazyLoadArea'), 
        __metadata('design:type', Number)
    ], ImageLazyLoadAreaDirective.prototype, "threshold", void 0);
    ImageLazyLoadAreaDirective = __decorate([
        core_1.Directive({
            selector: '[imageLazyLoadArea]'
        }),
        __param(0, core_1.Query(core_1.forwardRef(function () { return ImageLazyLoadItemDirective; }), { descendants: true })), 
        __metadata('design:paramtypes', [core_1.QueryList])
    ], ImageLazyLoadAreaDirective);
    return ImageLazyLoadAreaDirective;
}());
exports.ImageLazyLoadAreaDirective = ImageLazyLoadAreaDirective;
var ImageLazyLoadItemDirective = (function () {
    function ImageLazyLoadItemDirective(el, renderer, lazyLoader) {
        this.el = el;
        this.renderer = renderer;
        this.lazyLoader = lazyLoader;
        this.loading = false;
        this.loaded = false;
        this.error = false;
        this.loadingClass = 'loading';
        this.loadedClass = 'loaded';
        this.errorClass = 'error';
        this.tagName = el.nativeElement.tagName;
        if (typeof (this.imageLazyLoadConfig) === 'object') {
            this.loadingClass = this.imageLazyLoadConfig.loadingClass || this.loadingClass;
            this.loadedClass = this.imageLazyLoadConfig.loadedClass || this.loadedClass;
            this.errorClass = this.imageLazyLoadConfig.errorClass || this.errorClass;
        }
    }
    /*
    * @returns return position/dimension info as an Object `{top, left, bottom}`.
    */
    ImageLazyLoadItemDirective.prototype.getPosition = function () {
        var box = this.el.nativeElement.getBoundingClientRect();
        var top = box.top + (window.pageYOffset - document.documentElement.clientTop);
        return {
            top: top,
            left: box.left + (window.pageXOffset - document.documentElement.clientLeft),
            bottom: top + this.el.nativeElement.clientHeight
        };
    };
    /*
    * @returns container target to place `loading`/`loaded` classes onto.
    */
    ImageLazyLoadItemDirective.prototype.getLoadingContainer = function () {
        if (this.imageLazyLoadingContainer) {
            // find parent node with specified selector
            var collectionHas = function (a, b) {
                for (var i in a) {
                    if (a[i] === b)
                        return true;
                }
                return false;
            };
            var all = document.querySelectorAll(this.imageLazyLoadingContainer);
            var cur = this.el.nativeElement.parentNode;
            while (cur && !collectionHas(all, cur)) {
                cur = cur.parentNode;
            }
            if (cur) {
                return cur;
            }
            else {
                // fallback to direct parentNode if not found
                return this.el.nativeElement.parentNode;
            }
        }
        else {
            // default is direct parentNode for IMG and the node itself for background-image
            if (this.tagName === 'IMG') {
                return this.el.nativeElement.parentNode;
            }
            else {
                return this.el.nativeElement;
            }
        }
    };
    ImageLazyLoadItemDirective.prototype.hasClassName = function (name) {
        return new RegExp('(?:^|\\s+)' + name + '(?:\\s+|$)').test(this.getLoadingContainer().className);
    };
    ImageLazyLoadItemDirective.prototype.addClassName = function (name) {
        if (!this.hasClassName(name)) {
            var container = this.getLoadingContainer();
            container.className = container.className ? [container.className, name].join(' ') : name;
        }
    };
    ImageLazyLoadItemDirective.prototype.removeClassName = function (name) {
        if (this.hasClassName(name)) {
            var container = this.getLoadingContainer();
            var c = container.className;
            container.className = c.replace(new RegExp('(?:^|\\s+)' + name + '(?:\\s+|$)', 'g'), '');
        }
    };
    ImageLazyLoadItemDirective.prototype.toggleLoaded = function (enable) {
        this.loaded = enable;
        if (enable) {
            this.removeClassName(this.loadingClass);
            this.addClassName(this.loadedClass);
        }
        else {
            this.removeClassName(this.loadedClass);
        }
    };
    /*
    * starts loading the image in the background.
    */
    ImageLazyLoadItemDirective.prototype.loadImage = function () {
        var _this = this;
        if (!this.loaded && !this.loading) {
            this.loading = true;
            this.addClassName(this.loadingClass);
            var customHeaders = this.imageLazyLoadConfig ? this.imageLazyLoadConfig.headers : null;
            this.lazyLoader.load(this.imageLazyLoadItem, customHeaders).then(function () {
                _this.setImage();
            }, function (err) {
                _this.error = true;
                _this.loading = false;
                _this.removeClassName(_this.loadingClass);
                _this.addClassName(_this.errorClass);
            });
        }
    };
    /*
    * sets the image to `imageLazyLoadItem`.
    */
    ImageLazyLoadItemDirective.prototype.setImage = function () {
        if (!this.loaded) {
            if (this.tagName === 'IMG') {
                this.renderer.setElementAttribute(this.el.nativeElement, 'src', this.imageLazyLoadItem);
            }
            else {
                this.renderer.setElementAttribute(this.el.nativeElement, 'style', "background-image:url('" + this.imageLazyLoadItem + "')");
            }
            this.loading = false;
            this.toggleLoaded(true);
        }
    };
    __decorate([
        core_1.Input('imageLazyLoadItem'), 
        __metadata('design:type', String)
    ], ImageLazyLoadItemDirective.prototype, "imageLazyLoadItem", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], ImageLazyLoadItemDirective.prototype, "imageLazyLoadingContainer", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], ImageLazyLoadItemDirective.prototype, "imageLazyLoadConfig", void 0);
    ImageLazyLoadItemDirective = __decorate([
        core_1.Directive({
            selector: '[imageLazyLoadItem]'
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, image_lazy_load_provider_1.ImageLazyLoaderService])
    ], ImageLazyLoadItemDirective);
    return ImageLazyLoadItemDirective;
}());
exports.ImageLazyLoadItemDirective = ImageLazyLoadItemDirective;
exports.IMAGELAZYLOAD_DIRECTIVES = [ImageLazyLoadAreaDirective, ImageLazyLoadItemDirective];
//# sourceMappingURL=image-lazy-load.directive.js.map